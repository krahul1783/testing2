#include <bits/stdc++.h>
using namespace std;

// #define int long long

void judge()
{
    #ifndef ONLINE_JUDGE
        freopen("Input.txt", "r", stdin);
        freopen("Output.txt", "w", stdout);
    #endif
}

struct node
{
    int key;
    node *left;
    node *right;

    // node(int x)
    // {
    //     key = x;
    //     left=right=NULL;
    // }
};


node *create(node *root)
{
    int x;
    cin >> x;

    if(x == -1) return NULL;

    root = new node;
    root->key = x;

    root->left = create(root->left);
    root->right = create(root->right);

    return root;

}
bool dls(node *root, int x)
{
    // if(curr == level) return 0;
    if(root!=NULL)
    {
        // cout << root->key << " ";
        if(root->key == x) return true;
        dls(root->left, x);
        dls(root->right,x);
    }
   
}

int bfs(node *root, int x)
{
    if(root == NULL ) return 0;
    
    queue <node *> q;
    q.push(root);

    while(q.empty() == false)
    {
        node *curr = q.front();

        if(curr->key == x) return 1;
        else
        {
            q.pop();
        }

        if(curr->left != NULL) q.push(curr->left);
        if(curr->right != NULL) q.push(curr->right);
    }

    return 0;
}



signed main() {
    judge();

    // node *root = new node(10);
    // root -> left = new node(20);
    // root -> right = new node(30);
    // root -> left ->right = new node(40);
    // root -> left ->left = new node(50);
    // root -> right -> right = new node(60);
    // root -> right -> left = new node(70);
    node *root = NULL;
    root = create(root);
    int e;
    cin >> e;
    int level = 2;
    if(dls(root,e)) cout << "YES" << endl;
    else cout << "NO" << endl;
    // dls(root,e, 0, level);
    
}


